name: Build project

on: [push, pull_request]

jobs:
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ${{ matrix.targetPlatform == 'iOS' && 'macos-latest' || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - Android # Build an Android .apk standalone app.
          - iOS # Build an iOS app.
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1
      - if: matrix.targetPlatform == 'iOS'
        name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}
      - if: matrix.targetPlatform == 'iOS'
        name: Install Provisioning Profile
        uses: apple-actions/download-provisioning-profiles@v1
        with:
          bundle-id: ${{ secrets.IOS_BUNDLE_ID }}
          profile-type: 'IOS_APP_STORE'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
      - if: matrix.targetPlatform == 'iOS'
        name: Setup Apple Developer Account
        run: |
          # Create Xcode settings directory
          mkdir -p ~/Library/Developer/Xcode/UserData/IDEWorkspaceSharedSettings.xcuserdatad
          
          # Create settings file
          echo '<?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>IDELastDistributedNotificationAppWatchingEnabled</key>
              <true/>
              <key>IDELastMacOSXSDK</key>
              <string>14.4</string>
              <key>IDELastXcodeSystemLogLocation</key>
              <string>/Users/runner/Library/Developer/Xcode/DerivedData/Unity-iPhone-crjxlrgppfabfnenstxvmismtxgy/Logs/Debug</string>
              <key>IDEWorkspaceSharedSettings_AutocreateContextsIfNeeded</key>
              <false/>
          </dict>
          </plist>' > ~/Library/Developer/Xcode/UserData/IDEWorkspaceSharedSettings.xcuserdatad/WorkspaceSettings.xcsettings
          
          # Create a temporary keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          
          # Add the certificate to the keychain
          echo "${{ secrets.IOS_P12_BASE64 }}" | base64 --decode > cert.p12
          security import cert.p12 -k build.keychain -P "${{ secrets.IOS_P12_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          
          # List available identities
          security find-identity -v -p codesigning
          
          # Clean up certificate file
          rm -f cert.p12
      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          androidExportType: 'androidAppBundle'
          androidKeystoreName: user.keystore
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
      - if: matrix.targetPlatform == 'iOS'
        name: Copy exportOptions.plist
        run: |
          cp .github/workflows/exportOptions.plist build/iOS/iOS/
      - if: matrix.targetPlatform == 'iOS'
        name: Debug Build Directory
        run: |
          cd build/iOS/iOS
          pwd
          ls -la
      - if: matrix.targetPlatform == 'iOS'
        name: Build and Archive iOS App
        run: |
          cd build/iOS/iOS
          if [ ! -d "Unity-iPhone.xcodeproj" ]; then
            echo "Unity-iPhone.xcodeproj not found in $(pwd)"
            echo "Available files:"
            ls -la
            exit 1
          fi
          xcodebuild -project Unity-iPhone.xcodeproj -scheme Unity-iPhone -configuration Release -sdk iphoneos build archive -archivePath ./build/Unity-iPhone.xcarchive -allowProvisioningUpdates
          xcodebuild -exportArchive -archivePath ./build/Unity-iPhone.xcarchive -exportOptionsPlist exportOptions.plist -exportPath ./build -allowProvisioningUpdates
      - if: matrix.targetPlatform == 'iOS'
        name: Upload to TestFlight
        run: |
          cd build/iOS/build
          xcrun altool --upload-app --type ios --file "Unity-iPhone.ipa" --apiKey "${{ secrets.APPSTORE_KEY_ID }}" --apiIssuer "${{ secrets.APPSTORE_ISSUER_ID }}"
      - uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
