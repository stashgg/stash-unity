name: Build project

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        type: choice
        options:
          - StandaloneWindows64
          - Android
          - iOS

jobs:
  buildForAllSupportedPlatforms:
    name: Build for ${{ inputs.platform }}
    runs-on: ${{ inputs.platform == 'iOS' && 'macos-latest' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ inputs.platform }}
          restore-keys: Library-
      - if: inputs.platform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1
      - if: inputs.platform == 'iOS'
        name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}
      - if: inputs.platform == 'iOS'
        name: Install Provisioning Profile
        uses: apple-actions/download-provisioning-profiles@v1
        with:
          bundle-id: ${{ secrets.IOS_BUNDLE_ID }}
          profile-type: 'IOS_APP_STORE'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
      - if: inputs.platform == 'iOS'
        name: Create exportOptions.plist
        run: |
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>DB5KZDZYT5</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF
      - if: inputs.platform == 'iOS'
        name: Verify iOS Setup
        run: |
          echo "=== Installed Certificates ==="
          security find-identity -v -p codesigning
          echo "=== Installed Provisioning Profiles ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "=== Available Teams ==="
          xcrun xcodebuild -showBuildSettings | grep DEVELOPMENT_TEAM || echo "No team found"
      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          androidExportType: 'androidAppBundle'
          androidKeystoreName: user.keystore
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
        with:
          targetPlatform: ${{ inputs.platform }}
      - if: inputs.platform == 'iOS'
        name: Build and Archive iOS App
        run: |
          cd build/iOS/iOS
          # Copy exportOptions.plist to the correct location
          cp ../../../exportOptions.plist .
          
          # Get the provisioning profile UUID
          PROFILE_UUID=$(ls ~/Library/MobileDevice/Provisioning\ Profiles/ | head -1 | sed 's/.mobileprovision//')
          echo "Using provisioning profile: $PROFILE_UUID"
          
          # Set up the development team and provisioning profile in the project
          sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "DB5KZDZYT5";/g' Unity-iPhone.xcodeproj/project.pbxproj
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' Unity-iPhone.xcodeproj/project.pbxproj
          sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = \"\";/PROVISIONING_PROFILE_SPECIFIER = \"$PROFILE_UUID\";/g" Unity-iPhone.xcodeproj/project.pbxproj
          
          # Verify project settings
          echo "=== Project Build Settings ==="
          xcodebuild -project Unity-iPhone.xcodeproj -target Unity-iPhone -showBuildSettings | grep -E "(DEVELOPMENT_TEAM|CODE_SIGN|PROVISIONING_PROFILE)"
          
          # Build and archive
          xcodebuild -project Unity-iPhone.xcodeproj \
            -scheme Unity-iPhone \
            -configuration Release \
            -sdk iphoneos \
            -archivePath ./build/Unity-iPhone.xcarchive \
            DEVELOPMENT_TEAM="DB5KZDZYT5" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            archive
          
          # Export the archive
          xcodebuild -exportArchive \
            -archivePath ./build/Unity-iPhone.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath ./build
      - if: inputs.platform == 'iOS'
        name: Upload to TestFlight
        run: |
          cd build/iOS/iOS/build
          xcrun altool --upload-app --type ios --file "Unity-iPhone.ipa" --apiKey "${{ secrets.APPSTORE_KEY_ID }}" --apiIssuer "${{ secrets.APPSTORE_ISSUER_ID }}"
      - uses: actions/upload-artifact@v4
        with:
          name: Build-${{ inputs.platform }}
          path: build/${{ inputs.platform }}
