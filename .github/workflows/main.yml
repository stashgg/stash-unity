name: Build project

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        type: choice
        options:
          - StandaloneWindows64
          - Android
          - iOS

jobs:
  buildForAllSupportedPlatforms:
    name: Build for ${{ inputs.platform }}
    runs-on: ${{ inputs.platform == 'iOS' && 'macos-latest' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ inputs.platform }}
          restore-keys: Library-
      - if: inputs.platform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1
      - if: inputs.platform == 'iOS'
        name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}
      - if: inputs.platform == 'iOS'
        name: Install Provisioning Profile
        uses: apple-actions/download-provisioning-profiles@v1
        with:
          bundle-id: ${{ secrets.IOS_BUNDLE_ID }}
          profile-type: 'IOS_APP_STORE'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          androidExportType: 'androidAppBundle'
          androidKeystoreName: user.keystore
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
        with:
          targetPlatform: ${{ inputs.platform }}
      - if: inputs.platform == 'iOS'
        name: Build and Archive iOS App
        run: |
          cd build/iOS/iOS
          xcodebuild -project Unity-iPhone.xcodeproj -scheme Unity-iPhone -configuration Release -sdk iphoneos build archive -archivePath ./build/Unity-iPhone.xcarchive -allowProvisioningUpdates
          xcodebuild -exportArchive -archivePath ./build/Unity-iPhone.xcarchive -exportOptionsPlist exportOptions.plist -exportPath ./build -allowProvisioningUpdates
      - if: inputs.platform == 'iOS'
        name: Upload to TestFlight
        run: |
          cd build/iOS/iOS/build
          xcrun altool --upload-app --type ios --file "Unity-iPhone.ipa" --apiKey "${{ secrets.APPSTORE_KEY_ID }}" --apiIssuer "${{ secrets.APPSTORE_ISSUER_ID }}"
      - uses: actions/upload-artifact@v4
        with:
          name: Build-${{ inputs.platform }}
          path: build/${{ inputs.platform }}
