name: Build Unity Project

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        type: choice
        options:
          - StandaloneWindows64
          - Android
          - iOS

jobs:
  build:
    name: Build for ${{ inputs.platform }}
    runs-on: ${{ inputs.platform == 'iOS' && 'macos-latest' || 'ubuntu-latest' }}
    
    steps:
      # Checkout repository with LFS support
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      
      # Cache Unity Library folder
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ inputs.platform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ inputs.platform }}-
            Library-
      
      # Free up disk space for Android builds
      - name: Free disk space (Android only)
        if: inputs.platform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1
      
      # iOS: Setup certificates and provisioning profiles
      - name: Setup iOS certificates
        if: inputs.platform == 'iOS'
        uses: Apple-Actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}
      
      - name: Download iOS provisioning profiles
        if: inputs.platform == 'iOS'
        uses: Apple-Actions/download-provisioning-profiles@v3
        with:
          bundle-id: 'com.stash.sdkdemo'
          profile-type: 'IOS_APP_STORE'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
      
      # Build Unity project
      - name: Build Unity project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ inputs.platform }}
          buildName: ${{ inputs.platform == 'iOS' && 'iOS' || inputs.platform }}
          androidExportType: ${{ inputs.platform == 'Android' && 'androidAppBundle' || '' }}
          androidKeystoreName: ${{ inputs.platform == 'Android' && 'user.keystore' || '' }}
          androidKeystoreBase64: ${{ inputs.platform == 'Android' && secrets.ANDROID_KEYSTORE_BASE64 || '' }}
          androidKeystorePass: ${{ inputs.platform == 'Android' && secrets.ANDROID_KEYSTORE_PASS || '' }}
          androidKeyaliasName: ${{ inputs.platform == 'Android' && secrets.ANDROID_KEYALIAS_NAME || '' }}
          androidKeyaliasPass: ${{ inputs.platform == 'Android' && secrets.ANDROID_KEYALIAS_PASS || '' }}
      
      # iOS: Build Xcode project and create IPA
      - name: Build iOS Xcode project
        if: inputs.platform == 'iOS'
        run: |
          cd build/iOS/iOS
          
          # Configure Xcode project with team ID
          xcodebuild -project Unity-iPhone.xcodeproj \
            -scheme Unity-iPhone \
            -configuration Release \
            -sdk iphoneos \
            -archivePath Unity-iPhone.xcarchive \
            -allowProvisioningUpdates \
            DEVELOPMENT_TEAM="${{ secrets.IOS_TEAM_ID }}" \
            archive
          
          # Create export options plist
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ secrets.IOS_TEAM_ID }}</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Export IPA
          xcodebuild -exportArchive \
            -archivePath Unity-iPhone.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath export \
            -allowProvisioningUpdates
      
      # iOS: Upload to TestFlight
      - name: Upload to TestFlight
        if: inputs.platform == 'iOS'
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: 'build/iOS/iOS/export/Unity-iPhone.ipa'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
      
      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ inputs.platform }}
          path: build/${{ inputs.platform }}
          retention-days: 7
