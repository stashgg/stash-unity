name: Build Unity Project

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        type: choice
        options:
          - StandaloneWindows64
          - Android
          - iOS

jobs:
  build:
    name: Build for ${{ inputs.platform }}
    runs-on: ${{ inputs.platform == 'iOS' && 'macos-latest' || 'ubuntu-latest' }}
    
    steps:
      # Checkout repository with LFS support
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      
      # Cache Unity Library folder
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ inputs.platform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ inputs.platform }}-
            Library-
      
      # Free up disk space for Android builds
      - name: Free disk space (Android only)
        if: inputs.platform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1
      
      # iOS: Setup certificates and provisioning profiles
      - name: Clean iOS certificate state
        if: inputs.platform == 'iOS'
        run: |
          # Create App Store Connect API key for certificate management
          mkdir -p ~/.appstoreconnect/private_keys
          echo "${{ secrets.APPSTORE_PRIVATE_KEY }}" > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8
          
          # Delete any existing keychains that might have conflicting certificates
          security list-keychains | grep -o '/[^"]*\.keychain' | xargs -I {} security delete-keychain {} 2>/dev/null || true
          
          # Reset the keychain list to system defaults
          security list-keychains -s ~/Library/Keychains/login.keychain-db /Library/Keychains/System.keychain
          
          # Clear any cached Xcode signing state
          rm -rf ~/Library/Developer/Xcode/DerivedData/*/Build/Intermediates.noindex/ArchiveIntermediates/*/IntermediateBuildFilesPath/XCBuildData/*.xcbuilddata 2>/dev/null || true
          
          echo "Certificate state cleaned successfully"
      
      - name: Setup iOS certificates
        if: inputs.platform == 'iOS'
        run: |
          # Create a unique keychain to avoid conflicts
          KEYCHAIN_NAME="build-$(date +%s).keychain"
          KEYCHAIN_PASSWORD="${{ secrets.IOS_P12_PASSWORD }}"
          
          echo "Creating keychain: $KEYCHAIN_NAME"
          
          # Create and configure keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          
          # Add to keychain search list so Xcode can find it
          security list-keychains -s "$KEYCHAIN_NAME" ~/Library/Keychains/login.keychain-db /Library/Keychains/System.keychain
          
          # Set as default and unlock
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security set-keychain-settings -t 3600 -u "$KEYCHAIN_NAME"
          
          echo "Keychain created and configured"
          echo "Keychain search list:"
          security list-keychains
          
          # Import certificate
          echo "Importing certificate..."
          echo "${{ secrets.IOS_P12_BASE64 }}" | base64 --decode > certificate.p12
          
          # Check if P12 file was created successfully
          if [ -f certificate.p12 ]; then
            echo "P12 file created successfully, size: $(wc -c < certificate.p12) bytes"
          else
            echo "ERROR: P12 file was not created"
            exit 1
          fi
          
          # Import the certificate with additional flags
          security import certificate.p12 -k "$KEYCHAIN_NAME" -P "${{ secrets.IOS_P12_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/productbuild -T /usr/bin/productsign || {
            echo "ERROR: Certificate import failed"
            echo "Checking keychain contents:"
            security list-keychains
            echo "Checking if keychain exists:"
            ls -la "$KEYCHAIN_NAME" 2>/dev/null || echo "Keychain file not found"
            exit 1
          }
          
          echo "Certificate imported successfully"
          
          # Set key partition list for all common tools
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME" || {
            echo "WARNING: Failed to set key partition list, but continuing..."
          }
          
          # Make the keychain readable by all processes
          security set-keychain-settings -t 7200 -l "$KEYCHAIN_NAME"
          
          echo "Checking imported certificates:"
          security find-identity -v -p codesigning "$KEYCHAIN_NAME"
          
          # Store keychain name for later steps
          echo "KEYCHAIN_NAME=$KEYCHAIN_NAME" >> $GITHUB_ENV
          echo "KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> $GITHUB_ENV
          
          # Clean up certificate file
          rm certificate.p12
          
          echo "Certificate setup completed"
      
      - name: Download iOS provisioning profiles
        if: inputs.platform == 'iOS'
        uses: Apple-Actions/download-provisioning-profiles@v3
        with:
          bundle-id: 'com.stash.sdkdemo'
          profile-type: 'IOS_APP_STORE'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
      
      - name: Verify iOS setup
        if: inputs.platform == 'iOS'
        run: |
          echo "Available signing identities in default keychain:"
          security find-identity -v -p codesigning
          echo ""
          
          echo "Available signing identities in our build keychain:"
          security find-identity -v -p codesigning "$KEYCHAIN_NAME"
          echo ""
          
          # Debug keychain information
          echo "Current default keychain:"
          security default-keychain
          echo ""
          echo "All keychains:"
          security list-keychains
          echo ""
          
          # Check if we have any certificates in our build keychain
          CERT_COUNT=$(security find-identity -v -p codesigning "$KEYCHAIN_NAME" | grep -c "valid identities found" | head -1)
          echo "Found $CERT_COUNT certificates in build keychain"
          
          # Check if we have a distribution certificate
          if security find-identity -v -p codesigning "$KEYCHAIN_NAME" | grep -q "Distribution"; then
            echo "✅ Distribution certificate found"
            echo "CERT_TYPE=distribution" >> $GITHUB_ENV
          else
            echo "⚠️  No Distribution certificate found."
            if security find-identity -v -p codesigning "$KEYCHAIN_NAME" | grep -q "Development"; then
              echo "   Found Development certificate - this can work for TestFlight uploads."
              echo "CERT_TYPE=development" >> $GITHUB_ENV
            else
              echo "   No certificates found in build keychain."
              echo "CERT_TYPE=none" >> $GITHUB_ENV
            fi
          fi
          
          echo ""
          echo "Installed provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          echo ""
          echo "Profile details:"
          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            echo "Profile: $profile"
            security cms -D -i "$profile" | grep -E 'TeamIdentifier|UUID|Name|com.stash.sdkdemo' -A1
            echo "---"
          done
      
      # Build Unity project
      - name: Build Unity project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ inputs.platform }}
          buildName: ${{ inputs.platform == 'iOS' && 'iOS' || inputs.platform }}
          androidExportType: ${{ inputs.platform == 'Android' && 'androidAppBundle' || '' }}
          androidKeystoreName: ${{ inputs.platform == 'Android' && 'user.keystore' || '' }}
          androidKeystoreBase64: ${{ inputs.platform == 'Android' && secrets.ANDROID_KEYSTORE_BASE64 || '' }}
          androidKeystorePass: ${{ inputs.platform == 'Android' && secrets.ANDROID_KEYSTORE_PASS || '' }}
          androidKeyaliasName: ${{ inputs.platform == 'Android' && secrets.ANDROID_KEYALIAS_NAME || '' }}
          androidKeyaliasPass: ${{ inputs.platform == 'Android' && secrets.ANDROID_KEYALIAS_PASS || '' }}
      
      # iOS: Build Xcode project and create IPA
      - name: Build iOS Xcode project
        if: inputs.platform == 'iOS'
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
          APP_STORE_CONNECT_API_KEY_IS_KEY_CONTENT_BASE64: false
        run: |
          cd build/iOS/iOS/
          
          # Clean any existing build artifacts
          xcodebuild clean -project Unity-iPhone.xcodeproj -scheme Unity-iPhone
          
          # Create App Store Connect API key for Xcode
          mkdir -p ~/.appstoreconnect/private_keys
          echo "${{ secrets.APPSTORE_PRIVATE_KEY }}" > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8
          
          # Ensure our keychain is active and unlocked
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          
          # Update project.pbxproj to set team ID for all targets
          sed -i '' "s/DevelopmentTeam = \"[^\"]*\"/DevelopmentTeam = \"${{ secrets.IOS_TEAM_ID }}\"/g" Unity-iPhone.xcodeproj/project.pbxproj
          sed -i '' "s/DevelopmentTeam = ;/DevelopmentTeam = \"${{ secrets.IOS_TEAM_ID }}\";/g" Unity-iPhone.xcodeproj/project.pbxproj
          sed -i '' "s/DEVELOPMENT_TEAM = \"[^\"]*\"/DEVELOPMENT_TEAM = \"${{ secrets.IOS_TEAM_ID }}\"/g" Unity-iPhone.xcodeproj/project.pbxproj
          sed -i '' "s/DEVELOPMENT_TEAM = ;/DEVELOPMENT_TEAM = \"${{ secrets.IOS_TEAM_ID }}\";/g" Unity-iPhone.xcodeproj/project.pbxproj
          
          # Configure for manual signing with Distribution certificate
          sed -i '' 's/CODE_SIGN_STYLE = Automatic/CODE_SIGN_STYLE = Manual/g' Unity-iPhone.xcodeproj/project.pbxproj
          sed -i '' 's/CODE_SIGN_IDENTITY = "[^"]*"/CODE_SIGN_IDENTITY = "Apple Distribution"/g' Unity-iPhone.xcodeproj/project.pbxproj
          sed -i '' 's/CODE_SIGN_IDENTITY = ;/CODE_SIGN_IDENTITY = "Apple Distribution";/g' Unity-iPhone.xcodeproj/project.pbxproj
          
          # Get the provisioning profile UUID for manual signing
          PROFILE_PATH=$(ls ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | head -1)
          PROFILE_UUID=$(basename "$PROFILE_PATH" .mobileprovision)
          echo "Using provisioning profile: $PROFILE_UUID from $PROFILE_PATH"
          
          # Build with retry logic
          for attempt in 1 2 3; do
            echo "Build attempt $attempt..."
            
            # Ensure keychain is unlocked and in search path
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
            security list-keychains -s "$KEYCHAIN_NAME" ~/Library/Keychains/login.keychain-db /Library/Keychains/System.keychain
            
            if xcodebuild -project Unity-iPhone.xcodeproj \
              -scheme Unity-iPhone \
              -configuration Release \
              -sdk iphoneos \
              -archivePath Unity-iPhone.xcarchive \
              -allowProvisioningUpdates \
              -allowProvisioningDeviceRegistration \
              -authenticationKeyPath ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8 \
              -authenticationKeyID ${{ secrets.APPSTORE_KEY_ID }} \
              -authenticationKeyIssuerID ${{ secrets.APPSTORE_ISSUER_ID }} \
              DEVELOPMENT_TEAM="${{ secrets.IOS_TEAM_ID }}" \
              PRODUCT_BUNDLE_IDENTIFIER="com.stash.sdkdemo" \
              CODE_SIGN_STYLE="Manual" \
              CODE_SIGN_IDENTITY="Apple Distribution" \
              PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
              CODE_SIGNING_ALLOWED="YES" \
              CODE_SIGNING_REQUIRED="YES" \
              OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_NAME" \
              archive; then
              echo "Build succeeded on attempt $attempt"
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "Build failed after 3 attempts"
                echo "Final diagnostic information:"
                echo "Available certificates in build keychain:"
                security find-identity -v -p codesigning "$KEYCHAIN_NAME"
                echo "Available certificates in all keychains:"
                security find-identity -v -p codesigning
                echo "Keychain search list:"
                security list-keychains
                echo "Provisioning profiles:"
                ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
                exit 1
              fi
              echo "Build failed on attempt $attempt, retrying..."
              
              # On retry, clean up any certificate conflicts more aggressively
              if [ $attempt -eq 1 ]; then
                echo "Cleaning Xcode derived data..."
                rm -rf ~/Library/Developer/Xcode/DerivedData/* 2>/dev/null || true
              elif [ $attempt -eq 2 ]; then
                echo "Attempting to resolve certificate conflicts..."
                # Force Xcode to revoke and recreate certificates by clearing more state
                rm -rf ~/Library/Developer/Xcode/DerivedData/* 2>/dev/null || true
                rm -rf ~/Library/Caches/com.apple.dt.Xcode* 2>/dev/null || true
                
                # Re-unlock and re-add keychain
                security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
                security list-keychains -s "$KEYCHAIN_NAME" ~/Library/Keychains/login.keychain-db /Library/Keychains/System.keychain
              fi
              
              sleep 15
            fi
          done
          
          # Create export options plist for manual signing
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ secrets.IOS_TEAM_ID }}</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.stash.sdkdemo</key>
                  <string>$PROFILE_UUID</string>
              </dict>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>generateAppStoreInformation</key>
              <false/>
          </dict>
          </plist>
          EOF
          
          # Export IPA
          xcodebuild -exportArchive \
            -archivePath Unity-iPhone.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath export \
            -allowProvisioningUpdates \
            -authenticationKeyPath ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8 \
            -authenticationKeyID ${{ secrets.APPSTORE_KEY_ID }} \
            -authenticationKeyIssuerID ${{ secrets.APPSTORE_ISSUER_ID }}
      
      # iOS: List export contents for debugging
      - name: List iOS export contents
        if: inputs.platform == 'iOS'
        run: |
          echo "Contents of build/iOS/iOS/export:"
          ls -la build/iOS/iOS/export/
          echo ""
          echo "Looking for IPA files:"
          find build/iOS/iOS -name "*.ipa" -type f
      
      # iOS: Upload to TestFlight
      - name: Upload to TestFlight
        if: inputs.platform == 'iOS'
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: 'build/iOS/iOS/export/StashDemo.ipa'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
      
      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ inputs.platform }}
          path: build/${{ inputs.platform }}
          retention-days: 7
